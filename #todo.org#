* ---------------------------------------------------
* - Org File for Organizing Tasks RecipeBookServer  -
* ---------------------------------------------------

* ----------------
* -   Features   -
* ----------------
* DONE Create an activate URL '[2/2]'
  CLOSED: [2019-03-14 Thu 12:42]
  1. [X] Modify the create endpoint to default to user not being activated.
  2. [X] Create the activate endpoint
     I'll need an email server to send the activate email on user creation.

* MILESTONE Account Creation Email [[https://github.com/michaelplatt07/RecipeBookServer/milestone/1N][Account Creation Milestone]]

** DONE Create Email [[https://github.com/michaelplatt07/RecipeBookServer/issues/2][Issue 2]]
   CLOSED: [2019-03-14 Thu 13:24]
   This is a pretty easy task.  Just create a gmail account, something like nara_accountcreation@gmail.com

** TODO Configure Nodemailer [[https://github.com/michaelplatt07/RecipeBookServer/issues/3][Issue 3]] '[1/2]'
   This requires a few tasks to be complete
   1. [X] Create a config file with the email account credentials.
   2. [ ] Write code to load the credentials when needed and send the email.

** TODO Design and send the activate URL [[https://github.com/michaelplatt07/RecipeBookServer/issues/4][Issue 4]]
   The acivate URL already exists and I'm thinking it might not be too bad to simply send the user the direct
   activation URL with the Mongo ID to activate it.  I need to figure out if there is a security issue here though.

* TODO Implement error for user creation.
  We curently just break the server if the user account creation attempt fails.  Probaly not the best way to handle
  things and it should be fixed at some point.  Also should do proper validation to make sure user accounts being
  created are legitimate accounts instead of spooofed accounts.

* ----------------
* - Enhancements -
* ----------------
* TODO Put checks in the user creation '[0/2]'
  1. [ ] Check to make sure email address wasn't already used.
  2. [ ] Check to make sure user name doesn't exist.

* TODO Make the error checking more robust in the utility-function.js file.
  To make it more robust the testing should including checking for some basic valid inputs.  For example, we should
  not allow for people to do something like include a curse word in the name.  This should probably use a natural
  language processor at some point and may prove to be a huge task.  Checklist to follow as needed.

* TODO Clean up tests so the order of execution does not matter.
  I believe this will mean making a dump of the test database after creating it once, saving off that dump, and
  loading it up each time we run a new test.

* TODO Throw error on unit-converter.js converting from unit to unit.
  This should probably be a promise that I will be reject instead and kickng up the ladder.

* ----------------
* -  Bug Report  -
* ----------------
* TODO Fix grocery list
  There is a lack of error handling in the groceryList API.  I need to make sure to handle errors like a user not
  being authenticated, a user ID not existing in the request, and grabbing that data out for insertion anywhere the
  grocery list API call is happening.  I also need to ensure that the posts that create empty object have a way of 
  loading that empty object, probably from a config.

  Once that's done I can update the swagger docs accordingly and move forward from this API.

* ----------------
* -    UI/UX     -
* ----------------

* ----------------
* -   Research   -
* ----------------
* TODO Set up ElasticSearch '[0/5]'
  This isn't necessary right now because I don't have a lot of recipes in the database but it will become something
  I think I will want to leverage.  I should do set this up early while I have the chance though before things get 
  too out of control.
  1. [ ] Install on computer
  2. [ ] Set up
  3. [ ] Import data
  4. [ ] Connect to Node.js
  5. [ ] Investigate a service that would reimport every few days.

* TODO Move encryption to better location
  The code is basically sitting in the open that anyone could take a look at and use to decrypt the user password
  because of the secret.  This should probably be in an area that is never commited but sits on the server.

* TODO Implement some kind of logging for errors
  Not sure what I want here yet but I know I need it.

* TODO Fix const token in test-recipe-put-api.js
  We are currently just declaring a token object in the file and instead should maybe look to authenticate initially
  and then use that token to go forward.  Not sure if this is going to actually happen though.

* TODO Fix const token in test-recipe-get-api.js
  We might not even need it in there as we should be able to search for all recipes anyways.  Check to see if we
  actually do use this and if so handle appropriately.

* TODO General Cleanup '[1/6]'
  1. [-] Add more robust debug statements so I don't constantly have to do console.logs().
     1. [X] Complete all Recipes API call.
     2. [ ] Complete all other calls
  2. [ ] Clean up imports that aren't being used.
  3. [ ] Refactor routing to ExpressRouter
     I need to look into this and make sure it's the right thing to do
  4. [X] Check into integrating swagger.
     - Looked into it and it's pretty trivial to integrate swagger by just using swagger-jsdoc
  5. [ ] ExpressJoi
     Check into this for validating.
  6. [ ] Differentiate between put and post in the code base.

* ----------------
* -  Completed   -
* ----------------
* DONE Refactor out the course to be plural courses
  CLOSED: [2019-01-23 Wed 15:44]

* DONE Refactor out the cuisine to be plural cuisines
  CLOSED: [2019-01-23 Wed 15:44]

* DONE Check for any other plurals that aren't done correctly.
  CLOSED: [2019-01-23 Wed 15:47]

* DONE Fix associated tests with the plural changes. '[2/2]'
  CLOSED: [2019-01-23 Wed 15:44]
  1. [X] Courses
  2. [X] Cuisines

* DONE Finish the filter option.
  CLOSED: [2019-01-23 Wed 16:18]

* DONE Update the README with the correct JSON file structure.
  CLOSED: [2019-01-23 Wed 15:45]
  This means we need to update to have everything that wasn't plural now become plural.  So far that list only
  consists of cuisines and courses.

* DONE Need to update the post so the fields check correctly.
  CLOSED: [2019-01-23 Wed 15:47]

* DONE Fix post tests.
  CLOSED: [2019-01-23 Wed 15:49]

* DONE Create endpoint to serve URLs '[7/7]'
  CLOSED: [2019-01-28 Mon 14:38]
  This endpoint will serve the possible routes that a consumer of the API can hit.  It should be served as a JSON
  file with the appropriate routes and their associated methods and other additional information such as are 
  credentials required to use it or not.
  
  1. [X] Update the server.js file for the routes.
  2. [X] Add the debug to the NPM script.
  3. [X] Add swagger documentation to all the APIs: '[7/7]'
     1. [X] Recipes
     2. [X] GroceryList
     3. [X] Users
     4. [X] Cuisines
     5. [X] Measurements
     6. [X] Courses
     7. [X] Configs
  4. [X] Create the configuration stuff I need
     - Not sure what these are just yet it might be better to move this to a living document.
  5. [X] Implement the endpoints in the config API
     - This would include creating a swagger endpoint to dump everything.
  6. [X] Write tests to ensure endpoint config file is server correctly.
     - I changed my mind about tests here.  This would be increasingly tough to test and quite frankly isn't worth it
       given that I would just be copying the swagger JSON output and comparing and the config changes with each
       environment I use.
  7. [X] Add additional information like base URL
     Maybe make this a configuration file that is loaded up and add additional information as necessary
     - This point becomes moot because the config setup plus swagger docs will cover everything I need.

* DONE Clean up test dependency and inconsistency issues.
  CLOSED: [2019-02-08 Fri 08:47] - Ended up not being too bad.  Just connected to DB for each test and loaded some
  fixtures.

  This is a huge undertaking as I'm not sure exactly the scope.  Right now the tests are dependent on being completed in a 
  certain order to ensure some data exists in the database.  In reality I should find a way to load a list of test
  fixtures into the database when needed and remove the DB after each set of tests are ran.

* DONE Get user from Authorization header on submit.
  CLOSED: [2019-02-17 Sun 01:56] - NOTE(map) : This may be done for now but I should really look into making sure
  that using jwt.decode is acceptable.  Technically I'm validating on the endpoint before I even get to the part
  where I would be concerned about this but I still feel a bit uneasy about how things stand. 

  This is a priority 1 and needs to be fixed ASAP.

* DONE Create an endpoint for giving a recipe a rating '[2/2]'
  CLOSED: [2019-02-11 Mon 14:12]
  1. [X] Create endpoint.
     This endpoint should take into account all the ratings for before as well as the most recent rating.  The average
     should work very similarly to the endpoint for updating measurements in the database.  Use that as a starting
     point to see how to get it working.
  2. [X] Add swagger documentation.

* DONE Look into express-joi for data validation.
  CLOSED: [2019-01-24 Thu 16:07] - Moved this to a different area.  It's not actually done.
  This is a low priority and quite frankly something that would a nice to have in my toolbelt but we are already
  doing some major validation on the data ourselves.

